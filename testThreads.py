import pandas as pd

# Define the data as a list of tuples (Threads, Points, Time (ms))
data = [
    (1, 100000, 205.4), (2, 100000, 63.6), (3, 100000, 30.1), (4, 100000, 49.5),
    (5, 100000, 39.8), (6, 100000, 87.6), (7, 100000, 67), (8, 100000, 50.1),
    (9, 100000, 34.5), (10, 100000, 30.2), (11, 100000, 33), (12, 100000, 62),
    (13, 100000, 53.5), (14, 100000, 24.4), (15, 100000, 23.8), (16, 100000, 23.4),
    (17, 100000, 21.8), (18, 100000, 16), (19, 100000, 15.4), (20, 100000, 15.1),
    (21, 100000, 15.1), (22, 100000, 16.4),
    (1, 200000, 368.5), (2, 200000, 166.4), (3, 200000, 87.8), (4, 200000, 59.1),
    (5, 200000, 56.8), (6, 200000, 52.7), (7, 200000, 57.6), (8, 200000, 56.7),
    (9, 200000, 51.7), (10, 200000, 48.7), (11, 200000, 51.5), (12, 200000, 48.6),
    (13, 200000, 131), (14, 200000, 83.3), (15, 200000, 128.6), (16, 200000, 76.9),
    (17, 200000, 58.1), (18, 200000, 65.4), (19, 200000, 67.8), (20, 200000, 69.4),
    (21, 200000, 126.8), (22, 200000, 111.7),
    (1, 300000, 415.9), (2, 300000, 287.9), (3, 300000, 120.7), (4, 300000, 105.2),
    (5, 300000, 92.3), (6, 300000, 132.9), (7, 300000, 207.1), (8, 300000, 95),
    (9, 300000, 75.9), (10, 300000, 75.2), (11, 300000, 126.5), (12, 300000, 102.8),
    (13, 300000, 100.4), (14, 300000, 107.9), (15, 300000, 138.2), (16, 300000, 105.6),
    (17, 300000, 61.4), (18, 300000, 73.1), (19, 300000, 69.9), (20, 300000, 67.8),
    (21, 300000, 71.7), (22, 300000, 108.5),
    (1, 400000, 707.7), (2, 400000, 215.9), (3, 400000, 266.2), (4, 400000, 123),
    (5, 400000, 116.1), (6, 400000, 188.8), (7, 400000, 172.9), (8, 400000, 134.9),
    (9, 400000, 170), (10, 400000, 168.9), (11, 400000, 141.3), (12, 400000, 109.3),
    (13, 400000, 74.4), (14, 400000, 153.4), (15, 400000, 157), (16, 400000, 209.6),
    (17, 400000, 95.6), (18, 400000, 174), (19, 400000, 193.2), (20, 400000, 175.4),
    (21, 400000, 163), (22, 400000, 111.8),
    (1, 600000, 1025.4), (2, 600000, 513.6), (3, 600000, 273.9), (4, 600000, 276.4),
    (5, 600000, 158.5), (6, 600000, 438.9), (7, 600000, 333.5), (8, 600000, 219.2),
    (9, 600000, 194.1), (10, 600000, 206.4), (11, 600000, 177.3), (12, 600000, 127.4),
    (13, 600000, 118), (14, 600000, 207.2), (15, 600000, 118.9), (16, 600000, 196.1),
    (17, 600000, 169.5), (18, 600000, 196.4), (19, 600000, 183), (20, 600000, 208.9),
    (21, 600000, 215.4), (22, 600000, 148),
    (1, 800000, 1953.4), (2, 800000, 654.7), (3, 800000, 435.7), (4, 800000, 387.1),
    (5, 800000, 462.9), (6, 800000, 400.9), (7, 800000, 471.5), (8, 800000, 421),
    (9, 800000, 252.5), (10, 800000, 372.9), (11, 800000, 421.2), (12, 800000, 294.1),
    (13, 800000, 199.7), (14, 800000, 198.9), (15, 800000, 269.3), (16, 800000, 229.4),
    (17, 800000, 214.8), (18, 800000, 230.2), (19, 800000, 356.7), (20, 800000, 285.9),
    (21, 800000, 170.9), (22, 800000, 292.7),
    (1, 1000000, 1824.2), (2, 1000000, 821.8), (3, 1000000, 755.5), (4, 1000000, 451.8),
    (5, 1000000, 501.4), (6, 1000000, 323), (7, 1000000, 413.2), (8, 1000000, 283.5),
    (9, 1000000, 309.9), (10, 1000000, 321.3), (11, 1000000, 569.9), (12, 1000000, 400.3),
    (13, 1000000, 505.7), (14, 1000000, 239), (15, 1000000, 303.4), (16, 1000000, 363.6),
    (17, 1000000, 409.4), (18, 1000000, 194.7), (19, 1000000, 285.3), (20, 1000000, 326.3),
    (21, 1000000, 274.9), (22, 1000000, 349.4),
]

# Create the DataFrame
df = pd.DataFrame(data, columns=['Threads', 'Points', 'Time (ms)'])

# Now you can manipulate df as needed, e.g., analyze, filter, or visualize the data.
print(df.head())  # Display the first few rows of the DataFrame

import matplotlib.pyplot as plt

# Filter the DataFrame for a specific number of points, e.g., 100000
df_filtered = df[df['Points'] == 100000]

# Plot
'''
plt.figure(figsize=(10, 6))
plt.plot(df_filtered['Threads'], df_filtered['Time (ms)'], marker='o')
plt.title('Execution Time vs. Number of Threads for 100000 Points')
plt.xlabel('Number of Threads')
plt.ylabel('Time (ms)')
plt.grid(True)
plt.show()
'''

optimal_threads = df.loc[df.groupby('Points')['Time (ms)'].idxmin()]

# Display the optimal number of threads for each number of points
print(optimal_threads[['Points', 'Threads', 'Time (ms)']])
